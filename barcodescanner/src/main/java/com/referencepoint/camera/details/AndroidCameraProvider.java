package com.referencepoint.camera.details;

import com.referencepoint.camera.CameraProvider;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.ImageFormat;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.WindowManager;
import android.media.ImageReader;
import android.media.Image;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import io.reactivex.BackpressureStrategy;
import io.reactivex.Flowable;
import io.reactivex.schedulers.Schedulers;
import io.reactivex.subjects.PublishSubject;

public class AndroidCameraProvider implements CameraProvider {

    private static final String TAG = AndroidCameraProvider.class.getSimpleName();

    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();

    static {
        ORIENTATIONS.append(Surface.ROTATION_0, 90);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 270);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }
    /**
     * Max preview width that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_WIDTH = 1920;

    /**
     * Max preview height that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_HEIGHT = 1080;
    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession mCaptureSession;

    private Context mContext;
    private CameraManager mCameraManager;
    /**
     * A reference to the opened {@link CameraDevice}.
     */
    private CameraDevice mCameraDevice;
    /**
     * {@link CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder mPreviewRequestBuilder;
    /**
     * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
     */
    private CaptureRequest mPreviewRequest;
    /**
     * Orientation of the camera sensor
     */
    private int mSensorOrientation;
    /**
     * Whether the current camera device supports Flash or not.
     */
    private boolean mFlashSupported;
    /**
     * The {@link android.util.Size} of camera preview.
     */
    private Size mPreviewSize = new Size(MAX_PREVIEW_WIDTH, MAX_PREVIEW_HEIGHT);

    private ImageReader mImageReader;

    private Queue<String> mCameraIds = new LinkedList<>();
    private String mCurrentCameraId;
    private boolean cameraClosed;

    private PublishSubject<byte[]> imagePublishSubject = PublishSubject.create();

    public AndroidCameraProvider(Context context) {
        mContext = context;
        mCameraManager = (CameraManager)mContext.getSystemService(Context.CAMERA_SERVICE);
    }

    @Override
    public Size getPreviewSize() {
        return mPreviewSize;
    }

    private ImageReader.OnImageAvailableListener onImageAvailableListener = (ImageReader imReader) -> {
        final Image image = imReader.acquireNextImage();
        final ByteBuffer buffer = image.getPlanes()[0].getBuffer();
        final byte[] bytes = new byte[buffer.capacity()];
        buffer.get(bytes);
        image.close();
        imagePublishSubject.onNext(bytes);
    };

    private CameraCaptureSession.CaptureCallback captureListener = new CameraCaptureSession.CaptureCallback() {
        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request,
                                       @NonNull TotalCaptureResult result) {
            super.onCaptureCompleted(session, request, result);
            //closeCamera();
        }
    };

    @Override
    public Flowable<byte[]> preview() {

        try {
            String[] cameraIds = mCameraManager.getCameraIdList();
            if (cameraIds.length > 0) {
                mCameraIds.addAll(Arrays.asList(cameraIds));
                mCurrentCameraId = mCameraIds.poll();
                openCamera();
            }
        } catch (CameraAccessException e) {
            Log.e(TAG, "Exception occurred while accessing the list of cameras", e);
        }

        return imagePublishSubject
            .toFlowable(BackpressureStrategy.LATEST)
            .subscribeOn(Schedulers.computation());
    }

    private void openCamera() throws CameraAccessException {
        Log.d(TAG, "opening camera " + mCurrentCameraId);
        if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED) {
            mCameraManager.openCamera(mCurrentCameraId, mStateCallback, null);
        }
    }

    private ImageReader setupImageReader() throws CameraAccessException {
        CameraCharacteristics characteristics = mCameraManager.getCameraCharacteristics(mCameraDevice.getId());
        Size[] jpegSizes = null;
        StreamConfigurationMap streamConfigurationMap = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);

        if (streamConfigurationMap != null) {
            jpegSizes = streamConfigurationMap.getOutputSizes(ImageFormat.YUV_420_888);
        }

        boolean jpegSizesNotEmpty = jpegSizes != null && 0 < jpegSizes.length;
        int width = jpegSizesNotEmpty ? jpegSizes[0].getWidth() : MAX_PREVIEW_WIDTH;
        int height = jpegSizesNotEmpty ? jpegSizes[0].getHeight() : MAX_PREVIEW_HEIGHT;
        mPreviewSize = jpegSizesNotEmpty ? jpegSizes[0] : mPreviewSize;

        return ImageReader.newInstance(width, height, ImageFormat.YUV_420_888, 1);
    }

    private void startPreview() throws CameraAccessException {

        if (null == mCameraDevice) {
            return;
        }

        mImageReader = setupImageReader();
        mImageReader.setOnImageAvailableListener(onImageAvailableListener, null);

        List<Surface> outputSurfaces = new ArrayList<>();
        outputSurfaces.add(mImageReader.getSurface());

        mPreviewRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        mPreviewRequestBuilder.addTarget(mImageReader.getSurface());
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
        mPreviewRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation());

        mCameraDevice.createCaptureSession(outputSurfaces, new CameraCaptureSession.StateCallback() {
            @Override
            public void onConfigured(@NonNull CameraCaptureSession session) {
                // The camera is already closed
                if (null == mCameraDevice) {
                    return;
                }
                // When the session is ready, we start displaying the preview.
                mCaptureSession = session;
                try {
                    // Auto focus should be continuous for camera preview.
                    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                    // Flash is automatically enabled when necessary.
                    setAutoFlash(mPreviewRequestBuilder);
                    // Finally, we start displaying the camera preview.
                    mPreviewRequest = mPreviewRequestBuilder.build();
                    mCaptureSession.setRepeatingRequest(mPreviewRequest,
                        null, null);
                } catch (CameraAccessException e) {
                    imagePublishSubject.onError(e);
                }
            }

            @Override
            public void onConfigureFailed(@NonNull CameraCaptureSession session) { }
        }
        , null);
    }

    private void setAutoFlash(CaptureRequest.Builder requestBuilder) {
        if (mFlashSupported) {
            requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
                    CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);
        }
    }

    private void closeCamera() {
        if (null != mCameraDevice && !cameraClosed) {
            mCameraDevice.close();
            mCameraDevice = null;
        }
    }

    @Override
    public int getOrientation() {
        WindowManager wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
        int rotation = wm.getDefaultDisplay().getRotation();
        return ORIENTATIONS.get(rotation);
    }

    /**
     * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state.
     */
    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

        @Override
        public void onOpened(@NonNull CameraDevice camera) {
            cameraClosed = false;
            mCameraDevice = camera;
            try {
                startPreview();
            } catch (CameraAccessException e) {
                imagePublishSubject.onError(e);
            }
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice camera) {
            Log.d(TAG, " camera " + camera.getId() + " disconnected");
            if (mCameraDevice != null && !cameraClosed) {
                cameraClosed = true;
                mCameraDevice.close();
                mCameraDevice = null;
            }
        }

        @Override
        public void onClosed(@NonNull CameraDevice camera) {
            cameraClosed = true;
        }

        @Override
        public void onError(@NonNull CameraDevice camera, int error) {
            Log.e(TAG, "camera in error, int code " + error);
            if (mCameraDevice != null && !cameraClosed) {
                mCameraDevice.close();
                mCameraDevice = null;
            }
        }
    };

}
